openapi: 3.0.2
info:
  title: Saber API
  version: 2.0.1
servers:
  - url: https://saber-backend-gquk47qgta-et.a.run.app
    description: Development server
  - url: http://localhost:5000
    description: Local Development server
tags:
  - name: Users
    description: All about user account
  - name: Electricities
    description: Monitor and send electricity usage information
paths:
  /v1/users/register:
    post:
      tags:
        - Users
      summary: Register a new user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: User's name.
                username:
                  type: string
                  description: User's username.
                password:
                  type: string
                  format: password
                  description: User's password.
              required:
                - name
                - username
                - password
      responses:
        '201':
          description: Register Successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation.
                    example: Success
                  message:
                    type: string
                    description: Message indicating successful registration.
                    example: Register Successful
        '400':
          description: Username has been registered
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation.
                    example: Error
                  message:
                    type: string
                    description: Error message indicating the username has already been registered.
                    example: Username [username] already exist!

  /v1/users/login:
    post:
      tags:
        - Users
      summary: User login
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: User's username.
                password:
                  type: string
                  format: password
                  description: User's password.
              required:
                - username
                - password
      responses:
        '200':
          description: Login Successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation.
                  message:
                    type: string
                    description: Message indicating successful login.
                  token:
                    type: string
                    description: JWT token for the user session.
        '400':
          description: Wrong username or password
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation.
                  message:
                    type: string
                    description: Error message indicating invalid username or password.

  /v1/users/:
    get:
      tags:
        - Users
      summary: Get user information
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successfully get user information
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation.
                    example: Success
                  message:
                    type: string
                    description: Message indicating get user information is success.
                    example: Successfully get user information
                  user:
                    type: object
                    properties:
                      name:
                        type: string
                        description: Name of the user
                        example: John Doe
                      username:
                        type: string
                        description: Username of the user
                        example: johndoe
        '403':
          description: 'JWT must be included in bearer at authentication headers'
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation.
                    example: Error
                  message:
                    type: string
                    description: Error message indicating user need to login first.
                    example: You need to login first.
        '400':
          description: "User doesn't exist"
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation.
                    example: Error
                  message:
                    type: string
                    description: Error message indicating user doesn't exist".
                    example: User doesn't exist

  /v2/electricities/:
    post:
      tags:
        - Electricities
      summary: post current electricity usage
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                voltage:
                  type: number
                  description: IoT device's voltage in volt
                  example: 205.67
                current:
                  type: number
                  description: IoT device's currents in ampere
                  example: 1.58
              required:
                - voltage
                - current
      responses:
        '201':
          description: Data added
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: status of the operation.
                    example: Success
                  message:
                    type: string
                    description: Message indicating successfully added electricity usage.
                    example: Data Added

  /v2/electricities/usages:
    get:
      tags:
        - Electricities
      summary: Get average power usage per minute in the same day
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: date
          type: string
          description: Date of the usage.
          example: 2021-12-21
          required: false
      responses:
        '200':
          description: Successfully get all power usages on a given date.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation.
                    example: Success
                  message:
                    type: string
                    description: Message indicating successfully get the usage.
                    example: Successfully get average power usages on [date]
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        timestamp:
                          type: string
                          description: Timestamp (in minute) of the usage.
                          example: 21.30
                        avgPower:
                          type: number
                          description: Average power of the usage.
                          example: 118.76
        '404':
          description: No power consumption on a given date.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation.
                    example: Success
                  message:
                    type: string
                    description: Error message indicating no power consumption on a given date.
                    example: No electricity usage from [date] yet.

  /v2/electricities/usages/hour:
    get:
      tags:
        - Electricities
      summary: Get average power usage per hour in the last 24 hour.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successfully get all power usages in the last 24 hour.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the operation.
                    example: Success
                  message:
                    type: string
                    description: Message indicating successfully get the usage.
                    example: Successfully get avg power in the last 24h (per hour)
                  data:
                    type: array
                    items:
                      type: array
                      items:
                        type: array
                        items:
                          type: number
                          description: Average power per hour
                          example: 112.89

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
